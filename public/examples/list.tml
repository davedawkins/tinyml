//
// This is a TinyML implementation of a list type using unions, tuples and recursion

let nil = _.case2 ()

let cons x xs = 
    u<num * _,unit>.case1 (x, xs)

let rec plist list = 
    match list with 
        | x -> 
            do
                print (x#1)
                plist (x#2)
        | y -> 
            ()
        
let rec map f list = 
    match list with
        | xs ->
            cons (f xs#1) (map f xs#2)
        | empty ->
            nil

plist nil
let list1 = (cons 1 (cons 2 (cons 3 nil)))
plist list1

let list2 = (map (fun x -> x * 2) list1) in print list2
